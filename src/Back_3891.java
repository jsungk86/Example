import java.util.Scanner;

public class Back_3891 {

	public static void main(String[] args) {
		// make some change
		Scanner scan = new Scanner(System.in);
		String a = "93850485904385940305959306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369306846805878059234343434554345352343693068468058780592343434345543453523436930684680587805923434343455434535234369";
		
		char s = '0';
		int count = 4000;

		findMaxValue(a, count, '0', 0, 0);
		/*
		 * int a = scan.nextInt(); int b = scan.nextInt(); String c =
		 * scan.next(); String d = scan.next(); String e = scan.next();
		 * 
		 * String[] arr = {c,d,e};
		 * 
		 * combination(arr, 0, 3,3);
		 */
	}

	public static void findMaxValue(String s, int count, char max, int loc, int target) {

		for (int i = loc; i < loc + 1 + count; i++) {

			if (target == count) {
				System.out.print(s);
				return;
			}
			
			if (i == (count) || max == '9' || target + i == count) {

				s = s.substring(i + 1);
				System.out.print(max);
				target += i;
				findMaxValue(s, count, '0', 0, target);			
				return;
				
			} 

				if (s.charAt(i) > s.charAt(i + 1)) {
					max = s.charAt(i);
				} else {
					max = s.charAt(i + 1);
				}			

		}

	}

	public static void combination(String[] arr, int depth, int n, int k) {

		if (depth == k) {

			for (int i = 0; i < arr.length; i++)
				System.out.print(arr[i]);

			System.out.println();
			return;
		}

		for (int i = depth; i < n; i++) {

			swqp(arr, i, depth);
			combination(arr, depth + 1, n, k);
			swqp(arr, i, depth);

		}

	}

	public static void swqp(String[] arr, int depth, int target) {

		String temp = arr[depth];
		arr[depth] = arr[target];
		arr[target] = temp;

	}

}
